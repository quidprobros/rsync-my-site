#!/usr/bin/env bash

err() {
    echo "err(${1}) on line $(caller)" >&2
    exit "${1}"
}
trap 'err $? $LINEO' ERR

hangup() {
    pkill -P $$
    printf '\n\n User cancelled (killing spawned processes)\n'
    exit "${1}"
}
trap 'hangup $?' SIGINT

quiet=0
quieter=1
info() { [[ "$quiet" -eq 0 ]] && ([ '-v' = "${1}" ] && (shift; printf %s "$*") || printf %s\\n "$*") ; return 0;}
warn() {  [[ "$quieter" -eq 0 ]] && ([ '-v' = "${1}" ] && (shift; printf %s "$*") || printf %s\\n "$*") ; return 0;}

elementInArray() {
    declare -n array="${1}"
    local element="${2}"

    if [[ "${array[*]}" =~ (^|[[:space:]])"${element}"($|[[:space:]]) ]]; then
        return 0
    fi
    return 1
}

checkForPkgJson() {
    if [ -f ./package.json ]; then
        info "Reading config from ${PWD}/package.json"$'\n'
        :
    else
        tput bold
        warn ' * Warning: package.json not found!'
        tput sgr0
        return 1
    fi
    return 0
}

checkForJQ() {
    if ! command -v jq >/dev/null 2>&1
    then
        tput bold
        printf '  %s is required\n  https://stedolan.github.io/jq/ \n' $'`jq`'
        tput sgr0
        return 1
    fi
    return 0
}

handlePkgParseResponse() {
    local code="${1}"
    local property="${2}"
    tput bold
    case "${code}" in
        1)
            warn "Warning(${code}) is null ${property}"$'\n'
            tput sgr0
            return
            ;;
        3|4)
            warn "Warning(${code}) parsing ${property}"$'\n'
            warn ' * Property array is empty or doesn'\''t exist. Make sure this is what you want.'
            tput sgr0
            return
            ;;
        5)
            warn "Error(${code}) parsing ${property}"$'\n'
            tput sgr0
            return 1
            ;;
        *)
            warn "Error(${code}) parsing ${property}"$'\n'
            warn ' * Not sure what to do!\n\n'
            tput sgr0
            return 1
            ;;
    esac
}

# test if Internet reachable
connectionTest() {
    # test if port is open
    info -v "Testing SSH connection to remote host (${1}) ... "

    if ssh -q -o ConnectTimeout=20 "${1}" exit
    then
        tput bold
        info -v $'success'$'\n'
        tput sgr0
        return
    fi
    tput bold
    info 'failed'$'\n'
    info "  Could not connect to ${ssh_target}"$'\n'
    tput sgr0

    info -v '  Checking Internet connection ... '
    if ping -c 5 -o 8.8.8.8 >/dev/null 2>&1 &
    then
        :
    else
        info '  Internet is unreachable! Exiting ...\n\n'
        return 1
    fi
    tput bold
    info 'success!\n'
    tput sgr0

    return 1
}

help() {
    cat <<'HEREDOC'
rsync-my-site - commandline rsync wrapper for uploading websites

Usage:  rsync-my-site <command> <options>

  It is required that you add a package.json to your project's root directory.
  See readme for configuration details.

commands:
  up| run | start    run rsync, using package.json.config and command options
  down               put website in 'under construction' mode per user rules
  help               display this stuff

options:
  -t| --test      run in test mode, use --dry-run and --verbose with rsync
  -d| --delete    delete remote files, use --delete and --delete-excluded with rsync

  -q| --quiet)    silence info messages and warning messages
  -v) --verbose)  show info and warning messages

Futher reading:
  For more detail on how to use this script, see readme.

  To learn more about rsync, run `man rsync`.
HEREDOC
    return
}

prep() {
    checkForJQ || return 1
    checkForPkgJson || return 1
}

declare -a extra_args=()

run() {
    local extra_args_final="${*}"

    # check some stuff
    if ! prep;
    then
        exit
    fi

    # read file only once
    package_json=$(<./package.json)

    declare -A config=(
        [ssh_alias]=$(printf '%s' "${package_json}" | jq -r '.config.ssh_alias // empty')
        [ssh_user]=$(printf '%s' "${package_json}" | jq -r '.config.ssh_user // empty')
        [ssh_domain]=$(printf '%s' "${package_json}" | jq -r '.config.ssh_domain // empty')
        [ssh_remote_root]=$(printf '%s' "${package_json}" | jq -r '.config.ssh_remote_root // empty')
        [ssh_local_root]=$(printf '%s' "${package_json}" | jq -r '.config.ssh_local_root // empty')
        [ssh_remote_port]=$(printf '%s' "${package_json}" | jq -r '.config.ssh_remote_port // empty')
    )

    # apply default port
    : "${config[ssh_remote_port]:=22}"

    # apply default CWD
    : "${config[ssh_local_root]:="${PWD}/"}"

    if [ -z "${config[ssh_alias]}" ] && [ -z "${config[ssh_user]}" ]; then
        printf '\a!! Unable to determine SSH target !!\n'
        return
    elif [ -z "${config[ssh_alias]}" ]; then
        declare -r ssh_target="${config[ssh_user]}@${config[ssh_domain]}"
    else
        declare -r ssh_target="${config[ssh_alias]}"
    fi

    declare -r ssh_target_full="${ssh_target}:${config[ssh_remote_root]}"
    connectionTest "${ssh_target?}" || return

    tput smul; info 'File source:'; tput sgr0
    info "${config[ssh_local_root]}"$'\n'

    tput smul; info 'Target destination:'; tput sgr0
    info "${ssh_target}" "${config[ssh_alias]:+(alias)}"$'\n'

    # base-level exclusions (can extend)
    declare -a exclusions=(
        ".DS_Store"
        "*#*"
        "*~"
    )

    # error code is LOST when using declare for some reason
    if _exclusions=$(printf '%s' "${package_json}" | jq --exit-status -r '.config.rsync_exclude_list[]? | @sh')
    then
        :
    else
        code="${?}"
        handlePkgParseResponse "${code}" $'.config.rsync_exclude_list[]' || return
    fi

    for key in "${_exclusions[@]}"
    do
        exclusions+=("${key//\'/}")
    done
    unset key

    # base-level protections (relative to remote root)
    declare -a protection_and_perish=(
        "-p .DS_Store"
        "P /build"
        "P /my-prefix"
    )

    if protections=$(printf '%s' "${package_json}" | jq -er '( "P " + .config.rsync_protect_and_perish_list.protect[]? ) | @sh')
    then
        :
    else
        code="${?}"
        handlePkgParseResponse "${code}" $'.config.rsync_protect_and_perish_list.protect[]' | return
    fi

    for key in "${protections[@]}"
    do
        protection_and_perish+=("${key//\'/}")
    done
    unset key

    if perishes=$(printf '%s' "${package_json}" | jq -er '("-p " + .config.rsync_protect_and_perish_list.perish[]?) | @sh')
    then
        :
    else
        code="${?}"
        handlePkgParseResponse "${code}" $'.config.rsync_protect_and_perish_list.perish[]' | return
    fi

    for key in "${perishes[@]}"
    do
        protection_and_perish+=("${key//\'/}")
    done
    unset key

    declare -a inclusions=(
    )

    if _inclusions=$(printf '%s' "${package_json}" | jq --exit-status -r '.config.rsync_include_list[]? | @sh')
    then
        :
    else
        code="${?}"
        handlePkgParseResponse "${code}" $'.config.rsync_include_list[]' | return
    fi

    # allow expansion
    for key in "${_inclusions[@]}"
    do
        inclusions+=("${key//\'/}")
    done
    unset key

    tput smul; info 'Include list:'; tput sgr0
    if [[ 0 -eq "${#inclusions[@]}" ]]; then
        info '  !! No files from exclusion list will be uploaded !!\n\n'
    else
        info -v "${inclusions[@]}"
        info $'\n'
    fi

    tput smul; info 'Filtered:'; tput sgr0
    IFS=$'\n' info -v "${protection_and_perish[@]}"
    info $'\n'

    tput smul; info 'Exclusions:'; tput sgr0
    IFS=$'\n' info -v "${exclusions[@]}"
    info $'\n'

    tput bold
    tput smul
    if elementInArray extra_args '--dry-run' || elementInArray extra_args '-n'; then
        info '!! THIS IS A DRY RUN !!'
        if elementInArray extra_args '-d' || elementInArray extra_args '--delete'; then
            info '!! REMOTE FILES *WOULD* BE DELETED PER RULES !!'
        else
            info '!! REMOTE FILES *WOULD NOT* BE DELETED !!'
        fi
    else
        info '!! THIS IS A LIVE RUN !!'
        if elementInArray extra_args '-d' || elementInArray extra_args '--delete'; then
            info '!! REMOTE FILES *WILL* BE DELETED PER RULES !!'
        else
            tput smul
            info '!! REMOTE FILES *WILL NOT* BE DELETED !!'
        fi
    fi
    tput sgr0

    printf 'Select option 1 to start synchronization'
    if elementInArray extra_args '--dry-run'; then printf ' (dry run)'; else printf ' (live)'; fi
    if elementInArray extra_args '--delete'; then printf ' (delete mode)'; else printf ' (preserve mode)'; fi
    printf ':\n'
    printf '\a'
    select yn in "continue" "quit"
    do
        case $yn in
            $'continue' ) break
                  ;;
            quit ) return
                 ;;
        esac
    done

    info 'Starting ... '
    (
        rsync -e '/usr/bin/ssh -T -x' ${extra_args_final[@]} \
              --compress \
              --recursive \
              --protect-args \
              --include-from <(printf '%s\n' "${inclusions[@]}") \
              --exclude-from <(printf '%s\n' "${exclusions[@]}") \
              --filter='merge '<(printf '%s\n' "${protection_and_perish[@]}") \
              --archive \
              --progress \
              --times \
              --copy-links \
              "${config[ssh_local_root]}" \
              "${ssh_target_full?}"
    ) &
    wait $!
}

function init() {
    local cmd="${1}"
    local args=("${@}")
    local param
    if [[ 0 -eq ${#@} ]]; then
        help
        return
    fi
    set -- "${args[@]}"
    shift
    while [[ 0 -lt $# ]]; do
        param="$1"
        shift
        case $param in
            -t | --test)
                extra_args+=(
                    --dry-run
                    --verbose
                )
                ;;
            -d | --delete)
                extra_args+=(
                    --delete
                    --delete-excluded
                )
                ;;
            -v | --verbose)
                quiet=0
                quieter=0
                ;;
            -q | --quiet)
                quiet=1
                quieter=1
                ;;
            *)
                tput bold
                printf '  invalid option: "%s"\n' "${param}"
                tput sgr0
                return
                ;;
        esac
    done

    case $cmd in
        up|run|start)
            run "${extra_args[@]}"
            return
            ;;
        down)
            echo '(not implemented)'
            return
            ;;
        help)
            help
            return
            ;;
        *)
            tput bold
            printf '  invalid command: "%s"\n' "${cmd}"
            tput sgr0
            return
            ;;

    esac

    return
}
rsync-my-site() {
    init
}

if [[ $0 != "${BASH_SOURCE[0]}" ]]; then
    export -f rsync-my-site
else
    init "${@}"
    exit $?
fi

